{"version":3,"file":"main.js","mappings":"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","sources":["webpack://WeatherProject/./src/modules/WeatherAPI.js","webpack://WeatherProject/./src/modules/DOM.js","webpack://WeatherProject/./src/index.js"],"sourcesContent":["\r\n// City Search Endpoint\r\n\r\n\r\n// Returns an object of the data\r\nasync function accessWeatherAPI(url) {\r\n  try {\r\n    const response = await fetch(url, { mode:'cors' });\r\n    const weatherData = await response.json();\r\n    return weatherData;\r\n  }\r\n  catch (error) {\r\n    console.log(`ERROR: ${error}`);\r\n    return null;\r\n  }\r\n}\r\nasync function accessDayHourAPI(url) {\r\n  try {\r\n    const response = await fetch(url, { mode:'cors' });\r\n    const weatherData = await response.json();\r\n    return weatherData;\r\n  }\r\n  catch (error) {\r\n    console.log(`ERROR: ${error}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function weatherAPI(searchParameter) {\r\n  try {\r\n    const cityEndpoint = \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\n    const dayHourEndpoint = \"https://api.openweathermap.org/data/2.5/forecast?q=\";\r\n\r\n    const search = searchParameter || \"downey\";\r\n    const units = \"imperial\";\r\n    const appid = \"3f3520d066bd550c7930bc17d88f2f43\";\r\n\r\n    const cityURL = cityEndpoint + search + \"&units=\" + units + \"&appid=\" + appid;\r\n    const dayHrURL = dayHourEndpoint + search + \"&units=\" + units + \"&appid=\" + appid;\r\n\r\n    const cityWeatherData = await accessWeatherAPI(cityURL);\r\n    const dayHrWeatherData = await accessDayHourAPI(dayHrURL);\r\n    return { cityWeatherData, dayHrWeatherData };\r\n  }\r\n  catch (error) {\r\n    console.log(`ERROR: ${error}`);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\nexport { weatherAPI }\r\n\r\n","import { weatherAPI } from './WeatherAPI'; // Async Function\r\n\r\n\r\n\r\n/* <============ Initial Data ============> */\r\nconst daysList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nfunction getDate(daysList) {\r\n  const dateObj = new Date();\r\n\r\n  // Current Date\r\n  const currentDate = dateObj.toDateString().slice(4);\r\n\r\n  // Day\r\n  const day = daysList[dateObj.getDay()];\r\n  \r\n  // Time\r\n  let min = dateObj.getMinutes();\r\n  if (min < 10) min = `0${min}`;\r\n  const hours = dateObj.getHours() % 12;\r\n  const ampm = hours >= 12 ? 'pm' : 'am';\r\n  const time = `${hours}:${min} ${ampm}`;\r\n\r\n  const dateTime = {\r\n    currentDate,\r\n    day,\r\n    time\r\n  }\r\n  return dateTime;\r\n}\r\n\r\nfunction toggleUnits(unitsF, unitsC) {\r\n  unitsF.classList.toggle('selected-unit');\r\n  unitsC.classList.toggle('selected-unit');\r\n}\r\n\r\n\r\nlet tempSymbol = 'Â°F'; // Change on event\r\n\r\n/* <============ CacheDOM ============> */\r\n\r\n// City Weather\r\nconst description = document.querySelector('.weather-info-description');\r\nconst city = document.querySelector('.weather-info-city');\r\nconst date = document.querySelector('.weather-info-date');\r\nconst time = document.querySelector('.weather-info-time');\r\nconst temp = document.querySelector('.weather-info-temp');\r\nconst unitsF = document.querySelector('.weather-info-units-f');\r\nconst unitsC = document.querySelector('.weather-info-units-c');\r\nconst icon = document.querySelector('.city-icon');\r\nconst errorMsg = document.querySelector('.error-msg');\r\n\r\n// Input Search\r\nconst searchInput = document.querySelector('.search-box-input');\r\nconst searchIcon = document.querySelector('.search-icon-img');\r\n\r\n// Daily & Hourly\r\nconst daily = document.querySelector('.change-forecast-daily');\r\nconst hourly = document.querySelector('.change-forecast-hourly');\r\n\r\n// Forecast\r\nconst forecastDailyNodeList = document.querySelectorAll('.forecast-daily');\r\nconst days = document.querySelectorAll('.day');\r\nconst tempHighs = document.querySelectorAll('.temp-high');\r\nconst tempLows = document.querySelectorAll('.temp-low');\r\n\r\n// City Weather Details\r\nconst feelsText = document.querySelector('.feels-text');\r\nconst feelsTemp = document.querySelector('.feels-temp');\r\nconst humidityText = document.querySelector('.humidity-text');\r\nconst humidityNum = document.querySelector('.humidity-num');\r\nconst rainText = document.querySelector('.rain-text');\r\nconst rainPercent = document.querySelector('.rain-percent');\r\nconst windText = document.querySelector('.wind-text');\r\nconst windSpeed = document.querySelector('.wind-speed');\r\n\r\n/* <============ Initial Website Load ============> */\r\nasync function initialInit() {\r\n  // Grab weather data from API\r\n  const weatherData = await weatherAPI();\r\n  const cityData = weatherData.cityWeatherData;\r\n  const forecastData = weatherData.dayHrWeatherData;\r\n\r\n  updateWeatherDOM(cityData);\r\n  updateForecastDays();\r\n  updateForecastTemps(forecastData);\r\n}\r\n\r\nasync function runSearch(searchParameter) {\r\n  try {\r\n    const weatherData = await weatherAPI(searchParameter);\r\n    if (weatherData === null) return;\r\n    const cityData = weatherData.cityWeatherData;\r\n    const forecastData = weatherData.dayHrWeatherData;\r\n\r\n    updateWeatherDOM(cityData);\r\n    updateForecastDays();\r\n    updateForecastTemps(forecastData);\r\n\r\n    searchInput.value = '';\r\n    errorMsg.innerText = '';\r\n  }\r\n  catch (error) {\r\n    searchInput.value = '';\r\n    errorMsg.innerText = 'City Not Found!';\r\n  }\r\n\r\n}\r\n\r\n/* <============ DOM Manipulation ============> */\r\n// Functions that modify the innerText of the CacheDOM elements\r\n  // on search\r\n\r\nfunction updateWeatherDOM(data) {\r\n  const dateTimeDay = getDate(daysList);\r\n\r\n  description.innerText = data.weather[0].main;\r\n  city.innerText = data.name;\r\n  date.innerText = `${dateTimeDay.day}, ${dateTimeDay.currentDate}`;\r\n  time.innerText = dateTimeDay.time;\r\n  temp.innerText = `${Math.round(data.main.temp)} ${tempSymbol}`;\r\n  // console.log(data.weather[0].icon);\r\n\r\n  feelsTemp.innerText = `${Math.round(data.main.feels_like)} ${tempSymbol}`;\r\n  humidityNum.innerText = `${Math.round(data.main.humidity)} %`;\r\n  // rainPercent.innerText = \r\n  windSpeed.innerText = `${Math.round(data.wind.speed)} mph`;\r\n}\r\n\r\nfunction updateForecastDays() {\r\n  const dateObj = new Date();\r\n  const currentDayNum = dateObj.getDay();\r\n  days.forEach((day, currentIndex) => {\r\n    let currentNum = currentDayNum + currentIndex;\r\n    day.innerText = daysList[currentNum % 7];\r\n  });\r\n}\r\n\r\nfunction updateForecastTemps(forecastData) {\r\n  const dayData = forecastData.list; // A list * 8\r\n  tempHighs.forEach((tempH, currentIndex) => {\r\n    tempH.innerText = `${Math.round(dayData[currentIndex * 8].main.temp_max)} ${tempSymbol}`;\r\n  });\r\n  tempLows.forEach((tempL, currentIndex) => {\r\n    tempL.innerText = `${Math.round(dayData[currentIndex * 8].main.temp_min)} ${tempSymbol}`;\r\n  });\r\n}\r\n\r\n/* <============ Event Listeners ============> */\r\n// Search Form Submit\r\n// Daily Click\r\n// Hourly Click\r\nsearchInput.addEventListener('keyup', (event) => {\r\n  if (event.key === \"Enter\") {\r\n    runSearch(searchInput.value);\r\n    console.log(searchInput.value);\r\n  }\r\n});\r\nsearchIcon.addEventListener('click', (event) => {\r\n  runSearch(searchInput.value);\r\n  console.log(searchInput.value);\r\n})\r\nexport { initialInit }","import './css/style.css'; // This imports the CSS that we want to use; As long as CSS // is loaded with style-loader + css-loader\r\nimport { initialInit } from './modules/DOM';\r\nimport { weatherAPI } from './modules/WeatherAPI';\r\n\r\ninitialInit();"],"names":["async","weatherAPI","searchParameter","search","units","appid","cityURL","dayHrURL","cityWeatherData","url","response","fetch","mode","json","error","console","log","accessWeatherAPI","dayHrWeatherData","accessDayHourAPI","daysList","description","document","querySelector","city","date","time","temp","errorMsg","searchInput","searchIcon","days","querySelectorAll","tempHighs","tempLows","feelsTemp","humidityNum","windSpeed","runSearch","weatherData","cityData","forecastData","updateWeatherDOM","updateForecastDays","updateForecastTemps","value","innerText","data","dateTimeDay","dateObj","Date","currentDate","toDateString","slice","day","getDay","min","getMinutes","hours","getHours","getDate","weather","main","name","Math","round","feels_like","humidity","wind","speed","currentDayNum","forEach","currentIndex","currentNum","dayData","list","tempH","temp_max","tempL","temp_min","addEventListener","event","key","initialInit"],"sourceRoot":""}